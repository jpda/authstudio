@using System.Text.Json.Serialization
@page "/code"
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@inject ITransientRepository TransientRepository

<PageTitle>Home</PageTitle>

<h1>codeflow and pkce debugger</h1>

<div class="mb-3">
    <h4>issuer</h4>
    <code>@Issuer</code>
</div>
<div class="mb-3">
    <h4>reqid</h4>
    <code>@State</code>
</div>
<div class="mb-3">
    <h4>token endpoint</h4>
    <code>@OriginalRequest.Issuer.TokenEndpoint</code>
</div>
<div class="mb-3">
    <h4>authorization code</h4>
    <code>@Code</code>
</div>
<div class="mb-3">
    <h4>Raw response</h4>
    <code>@Response</code>
</div>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="RedeemCode">Redeem Code</button>
</div>

@if (!string.IsNullOrEmpty(Tokens.IdToken) || !string.IsNullOrEmpty(Tokens.AccessToken) ||
!string.IsNullOrEmpty(Tokens.RefreshToken))
{
    <TokenInfo Token="Tokens" />
}

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "code")]
    public string Code { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery(Name = "state")]
    public string State { get; set; } = "";

    public string Issuer { get; set; } = "";

    public string Token { get; set; } = "";
    public string Response { get; set; } = "";

    private AuthorizeRequestModel OriginalRequest = new AuthorizeRequestModel();

    public TokenResponseModel Tokens { get; set; } = new TokenResponseModel();

    private async Task RedeemCode()
    {
        var client = ClientFactory.CreateClient("AuthClient");
        var data = new List<KeyValuePair<string, string>>() {
            new ("code", Code),
            new ("grant_type", "authorization_code"),
            // in theory this should always be valid seeing as we got here *somehow*
            new ("redirect_uri", $"{NavigationManager.BaseUri}code"),
            new ("client_id", OriginalRequest.ClientApp.ClientId),
            new ("scope", OriginalRequest.ScopeParameter),
            // obviously we would never want to do this for real - it completely defeats the purpose of the verifier
            new ("code_verifier", OriginalRequest.PkceChallenge.CodeVerifier)
        };
        var tokenResponse = await client.PostAsync($"{OriginalRequest.Issuer.TokenEndpoint}", new FormUrlEncodedContent(data));
        var rawResponse = await tokenResponse.Content.ReadAsStringAsync();
        Response = rawResponse;

        var token = System.Text.Json.JsonSerializer.Deserialize<TokenResponseModel>(Response);

        if (token != null)
        {
            Tokens = token;
            await TransientRepository.DeleteAuthorizeRequestModelAsync(State);
        }
    }

    protected async override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(State))
        {
            OriginalRequest = await TransientRepository.GetAuthorizeRequestModelAsync(State);
        }
        base.OnInitialized();
    }
}