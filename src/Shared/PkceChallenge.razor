@using authstudio;
@inject IPersistentSettingsRepository SettingsRepository
@inject IJSRuntime JSRuntime

<h2>PKCE code generator</h2>
<div class="alert alert-secondary mt-4">
    <EditForm Model="Pkce" OnSubmit="SubmitForm">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label for="CodeVerifier" class="form-label">Code Verifier</label>
            <div class="input-group">
                <button class="btn btn-outline-secondary" type="button"
                @onclick="async () => await CopyToClipboard(Pkce.CodeVerifier)"><span class="oi oi-clipboard"></span></button>
                <InputText @bind-Value="Pkce.CodeVerifier" class="form-control" disabled="true" />
            </div>
        </div>
        <div class="mb-3">
            <label for="CodeChallenge" class="form-label">Code Challenge</label>
            <div class="input-group">
                <button class="btn btn-outline-secondary" type="button"
                @onclick="async () => await CopyToClipboard(Pkce.CodeChallenge)"><span class="oi oi-clipboard"></span></button>
                <InputText @bind-Value="Pkce.CodeChallenge" class="form-control" disabled="true" />
            </div>
        </div>
        <div class="mb-3">
            <label for="CodeChallengeMethod" class="form-label">Challenge method</label>
            <span>@Pkce.CodeChallengeMethod</span>
        </div>
        <button type="submit" class="btn btn-primary">Generate</button>
    </EditForm>
</div>

@code {
    [Parameter]
    public PkceChallengeModel Pkce { get; set; } = new PkceChallengeModel();

    [Parameter]
    public EventCallback<PkceChallengeModel> PkceChanged { get; set; }


    private async Task SubmitForm()
    {
        await GenerateCodes();
        await PkceChanged.InvokeAsync(Pkce);
    }

    protected override async Task OnInitializedAsync()
    {
        await GenerateCodes();
        await base.OnInitializedAsync();
    }

    protected async Task GenerateCodes()
    {
        Pkce.GenerateChallenge();
        await PkceChanged.InvokeAsync(Pkce);
        await SettingsRepository.SetPkceChallengeModelAsync(Pkce);
    }

    protected async Task CopyToClipboard(string value)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", value);
    }
}
